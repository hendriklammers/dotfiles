# Create new directory and open it
md() {
  mkdir -p "$1"
  cd "$1" || exit 1
}

# Start an HTTP server from a directory, optionally specifying the port
server() {
  if command -v npx > /dev/null; then
    (port="${1:-8000}"
    open "http://localhost:${port}/" && npx serve -p "$port")
  fi
}

# Change directory to the current Finder directory
cdf() {
  target=$(osascript -e 'tell application "Finder" to if (count of Finder windows) > 0 then get POSIX path of (target of front Finder window as text)')
  if [ "$target" != "" ]; then
    cd "$target" || exit 1; pwd
  else
    echo 'No Finder window found' >&2
  fi
}

# Attach to tmux session if it exists otherwise open fzf
tm() {
  [ -n "$TMUX" ] && change="switch-client" || change="attach-session"
  if [ "$1" ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s "$1" && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || tmux
}

# Create new LICENSE file
license() {
  npx license "$(npm get init.license)" -o "$(npm get init.author.name)" > LICENSE
}

# .editorconfig file
editorconfig() {
  curl https://gist.githubusercontent.com/hendriklammers/2b09d9c5d6dada7a12ee311a65b6ca60/raw/8dec201982cc2b6c4dd37cd028b71bfc876d3763/.editorconfig -o .editorconfig -s
}

# Install npm package with separate types package
nit() {
  npm install -S "$1"
  npm install -D @types/"$1"
}

# Check if in Git repository
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}

# Open fzf 50% height
fzf_down() {
  fzf --height 50% "$@" --border
}

# Git status
fzf_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf_down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

# Git branch
fzf_gb() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf_down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1) | head -'$LINES |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

# Git tag
fzf_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf_down --multi --preview-window right:70% \
    --preview 'git show --color=always {} | head -'$LINES
}

# Git log
fzf_gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf_down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always | head -'$LINES |
  grep -o "[a-f0-9]\{7,\}"
}

# Git remote
fzf_gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf_down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1} | head -200' |
  cut -d$'\t' -f1
}

# Create a pull request and open it in browser
# Usage: gitpr <branch-name>
gitpr() {
  gh pr create --base "$1" --web
}
