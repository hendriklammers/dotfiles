snippet mod "module" b
module ${1:`!p snip.rv = snip.basename`} exposing (${2:..})

$0
endsnippet

snippet im "import" b
import ${1:Html}
endsnippet

snippet ime "import exposising" b
import ${1:List} exposing (${2:..})
endsnippet

snippet ima "import as" b
import ${1:Html.Attributes} as ${2:H}
endsnippet

snippet case "case pattern matching"
case $1 of
	$2 ->
		$0
endsnippet

snippet if "if else" b
if $1 then
	$2
else
	$0
endsnippet

snippet let "let in" b
let
	$1 =
		$2
in
	$0
endsnippet

snippet tya "type alias" b
type alias $1 =
	$2
endsnippet

snippet view "Html view" b
view${1:Name} : ${2:Model} -> Html Msg
view$1 ${3:model} =
    $0
endsnippet

snippet style "Style definition" b
${1:name}Style : List ( String, String )
$1Style =
		[ ( "$2", "$3" )
		, ( "$4", "$5" )$0
		]
endsnippet

snippet m! "default ( Model, Cmd Msg )" b
model ! []
endsnippet

snippet test "test"
test "${1}" <|
	\_ ->
		$0
endsnippet

snippet desc "Describe test"
describe "${1}"
	[ $0
	]
endsnippet

snippet elm "Elm Architecture boilerplate" b
module Main exposing (..)

import Html exposing (Html, text, program)


-- Model


type alias Model =
    String$0


initialModel : Model
initialModel =
    "Hello Elm"



-- Update


type Msg
    = NoOp


update : Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        NoOp ->
            model ! []



-- Subscriptions


subscriptions : Model -> Sub Msg
subscriptions model =
    Sub.none



-- View


view : Model -> Html Msg
view model =
    text model



-- Main


main : Program Never Model Msg
main =
    program
        { init = ( initialModel, Cmd.none )
        , subscriptions = subscriptions
        , update = update
        , view = view
        }
endsnippet
