#!/bin/bash
#
# Starts a new project

# Uses install script from repo to install dependencies
installDeps() {
  if [[ -f "install.sh" ]]; then
    echo "Installing dependencies"
    ./install.sh
    rm install.sh
  fi
}

# Adds project title and description
replaceTemplateStrings() {
  rg \<%PROJECT_TITLE%\> -l \
    | xargs sed -i "s/<%PROJECT_TITLE%>/$projectTitle/g"
  rg \<%PROJECT_DESCRIPTION%\> -l \
    | xargs sed -i "s/<%PROJECT_DESCRIPTION%>/$projectDescription/g"
}

react_project() {
  npx create-react-app . --template typescript

  # Install additional deps
  yarn add -D prettier typescript-styled-plugin
  yarn add styled-components @types/styled-components

  # Add eslint and prettier configuration to package.json
  if [[ -f "package.json" ]]; then
    local tempPackage
    tempPackage=$(mktemp)
    jq -r '. + {eslintConfig: { extends: "react-app" }, prettier: { semi: false, singleQuote: true, trailingComma: "es5" } }' package.json > "$tempPackage"
    mv "$tempPackage" package.json
  fi

  # Typescript support for styled-components
  if [[ -f "tsconfig.json" ]]; then
    local tempTsconfig
    tempTsconfig=$(mktemp)
    jq -r '. * {compilerOptions: {plugins: [{name: "typescript-styled-plugin"}]}}' tsconfig.json > "$tempTsconfig"
    mv "$tempTsconfig" tsconfig.json
  fi

  # Remove unused files
  rm src/{App.css,App.test.tsx,index.css,logo.svg,serviceWorker.ts}
}

PS3='Project type: '
select opt in Elm Node React
do
  case $opt in
    "Elm")
      projectType="elm"
      break
      ;;
    "React")
      projectType="react"
      break
      ;;
    "Node")
      projectType="node"
      break
      ;;
    *) echo "invalid option $REPLY";;
  esac
done

while [ -z "$projectTitle" ]
do
  read -rp "Title: " input;
  if [[ ! "$input" =~ ^[a-z0-9-]{3,}$ ]]; then
    echo "Invalid project title";
  elif [[ -d "$input" ]]; then
    echo "Directory with this title already exists";
  else
    projectTitle="$input"
  fi
done

read -rp "Description: " projectDescription;

while [ -z "$githubRepo" ]
do
  read -rp "Create a new repository on Github? [Y/n] " -n 1 choice
  case $choice in
    y|Y|"") githubRepo=true;;
    n|N) githubRepo=false;;
    *) echo " invalid option";;
  esac
done
echo ""

mkdir -p "$projectTitle"
cd "$projectTitle" || exit 1

# Project type specific actions
case "$projectType" in
  "elm")
    git clone git@github.com:hendriklammers/elm-project-starter.git .
    installDeps
    replaceTemplateStrings
    ;;
  "node")
    git clone git@github.com:hendriklammers/node-project-starter.git .
    installDeps
    replaceTemplateStrings
    ;;
  "react")
    react_project
    ;;
  *) echo >&2 "Invalid project type"; exit 1
esac
echo ""

# Add license
if [[ ! -f "LICENSE" ]]; then
  npx license mit > LICENSE
fi

# Start with a fresh git repo
if [[ -d ".git" ]]; then
  rm -rf .git
fi
git init && git add . && git commit -m "Initial commit"
echo ""

if [[ "$githubRepo" = true ]]; then
  if ! [[ -x "$(command -v hub)" ]]; then
    echo >&2 "hub is not installed."; exit 1
  fi
  hub create -p "$projectTitle" -d "$projectDescription"
  # git push -u origin master
fi
